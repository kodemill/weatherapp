{"version":3,"sources":["../../src/database/import-city-list.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,MAAM,eAAe,MAAM,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAqB;AAC1D,QAAM,aAAa,aAAG,gBAAH,CAAoB,WAAG,QAAvB,CAAnB;AACA;AACA,MAAI,SAAS,eAAK,UAAL,CAAgB,yBAAhB,EAAb;AACA,QAAM,UAAU,IAAhB;AACA,MAAI,UAAU,CAAd;AACA,MAAI,aAAa,CAAjB;AACA,QAAM,KAAK,mBAAS,eAAT,CAAyB;AAClC,WAAO,UAD2B;AAElC,cAAU;AAFwB,GAAzB,CAAX;AAIA,KAAG,EAAH,CAAM,MAAN,EAAc,QAAQ;AACpB,UAAM,OAAO,KAAK,KAAL,CAAW,IAAX,CAAb;AACA;AACA,SAAK,MAAL,GAAc,KAAK,IAAL,CAAU,WAAV,EAAd;AACA;AACA;AACA;AACA;AACA,SAAK,QAAL,GAAgB;AACd,YAAM,OADQ;AAEd,mBAAa,CAAC,KAAK,KAAL,CAAW,GAAZ,EAAiB,KAAK,KAAL,CAAW,GAA5B;AAFC,KAAhB;AAIA,WAAO,KAAK,KAAZ;AACA,WAAO,MAAP,CAAc,IAAd;AACA,QAAI,EAAE,OAAF,KAAc,OAAlB,EAA2B;AACzB,aAAO,OAAP,CAAe,OAAO;AACpB,YAAI,GAAJ,EAAS;AACP,iBAAO,GAAP;AACD;AACF,OAJD;AAKA,oBAAc,OAAd;AACA,gBAAU,CAAV;AACA,eAAS,eAAK,UAAL,CAAgB,yBAAhB,EAAT;AACD;AACF,GAxBD;AAyBA,KAAG,EAAH,CAAM,OAAN,EAAe,MAAM;AACnB,kBAAc,OAAd;AACA,QAAI,YAAY,CAAhB,EAAmB;AACjB,aAAO,OAAP,CAAe,OAAO;AACpB,YAAI,GAAJ,EAAS;AACP,iBAAO,GAAP;AACD,SAFD,MAEO;AACL,kBAAQ,UAAR;AACD;AACF,OAND;AAOD,KARD,MAQO;AACL,cAAQ,UAAR;AACD;AACF,GAbD;AAcD,CAlD0B,CAA3B;;oCAoDe,aAAY;AACzB,MAAI,OAAM,eAAK,UAAL,CAAgB,KAAhB,EAAN,MAAkC,CAAtC,EAAyC;AACvC,YAAQ,GAAR,CAAY,wBAAZ;AACA,UAAM,QAAQ,KAAK,GAAL,EAAd;AACA,UAAM,gBAAgB,MAAM,cAA5B;AACA,YAAQ,GAAR,CAAa,aAAW,aAAc,gBAAa,CAAC,KAAK,GAAL,KAAa,KAAd,IAAuB,IAAK,IAA/E;AACD;AACF,C","file":"import-city-list.js","sourcesContent":["import City from '../model/city';\nimport fs from 'fs';\nimport readline from 'readline';\nimport { db } from '../../config';\n\nconst importCities = () => new Promise((resolve, reject) => {\n  const readStream = fs.createReadStream(db.cityList);\n  // https://docs.mongodb.com/manual/reference/method/db.collection.initializeUnorderedBulkOp\n  let bulkOp = City.collection.initializeUnorderedBulkOp();\n  const opLimit = 1000;\n  let opCount = 0;\n  let sumOpCount = 0;\n  const rl = readline.createInterface({\n    input: readStream,\n    terminal: false,\n  });\n  rl.on('line', line => {\n    const city = JSON.parse(line);\n    // lowercase for faster regex search\n    city.nameLC = city.name.toLowerCase();\n    // convert location into valid GeoJSON Point:\n    // input: \"coord\":{\"lon\":34.283333,\"lat\":44.549999}}\n    // WGS84: 'Coordinate-axis order is longitude, latitude'\n    // output \"location\":{\"type\":\"Point\",\"coordinates\":[34.283333,44.549999]}\n    city.location = {\n      type: 'Point',\n      coordinates: [city.coord.lon, city.coord.lat],\n    };\n    delete city.coord;\n    bulkOp.insert(city);\n    if (++opCount === opLimit) {\n      bulkOp.execute(err => {\n        if (err) {\n          reject(err);\n        }\n      });\n      sumOpCount += opCount;\n      opCount = 0;\n      bulkOp = City.collection.initializeUnorderedBulkOp();\n    }\n  });\n  rl.on('close', () => {\n    sumOpCount += opCount;\n    if (opCount !== 0) {\n      bulkOp.execute(err => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(sumOpCount);\n        }\n      });\n    } else {\n      resolve(sumOpCount);\n    }\n  });\n});\n\nexport default async () => {\n  if (await City.collection.count() === 0) {\n    console.log('importing city list...');\n    const start = Date.now();\n    const importedCount = await importCities();\n    console.log(`imported ${importedCount} cities in ${(Date.now() - start) / 1000}s`);\n  }\n};\n"]}