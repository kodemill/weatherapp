{"version":3,"sources":["../../src/model/user.js"],"names":[],"mappings":";;;;;;AAAA;;;;;;AAEA,MAAM,aAAa,IAAI,mBAAS,MAAb,CAAoB;AACrC,QAAM,MAD+B;AAErC,UAAQ,CAAC;AACP,aAAS,MADF;AAEP,aAAS,OAFF;AAGP,sBAAkB;AAHX,GAAD,CAF6B;AAOrC,MAAI,MAPiC;AAQrC,WAAS;AACP,wBAAoB,OADb;AAEP,yBAAqB,OAFd;AAGP,wBAAoB;AAClB,YAAM,OADY;AAElB,eAAS;AAFS;AAHb,GAR4B;AAgBrC,SAAO;AACL,UAAM,MADD;AAEL,YAAQ,IAFH;AAGL,YAAQ;AAHH,GAhB8B;AAqBrC,cAAY;AACV,UAAM,MADI;AAEV,YAAQ,IAFE;AAGV,YAAQ;AAHE,GArByB;AA0BrC,YAAU;AACR,UAAM,MADE;AAER,YAAQ,IAFA;AAGR,YAAQ;AAHA;AA1B2B,CAApB,CAAnB;;AAiCA,WAAW,OAAX,CAAmB,YAAnB,GAAkC,UAAU,OAAV,EAAmB;AACnD,OAAK,OAAL,GAAe,KAAK,OAAL,IAAgB,EAA/B;AACA,OAAK,OAAL,CAAa,kBAAb,GACE,KAAK,OAAL,CAAa,kBAAb,IAAmC,QAAQ,kBAD7C;AAEA,OAAK,OAAL,CAAa,mBAAb,GACE,KAAK,OAAL,CAAa,mBAAb,IAAoC,QAAQ,mBAD9C;AAEA,OAAK,OAAL,CAAa,kBAAb,GACE,KAAK,OAAL,CAAa,kBAAb,IAAmC,QAAQ,kBAD7C;AAED,CARD;;AAUA,WAAW,OAAX,CAAmB,SAAnB,GAA+B,UAAU,KAAV,EAAiB;AAC9C,MAAI,UAAU,KAAd;AACA,MAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,cAAU,MAAM,OAAhB;AACD;AACD,SAAO,KAAK,MAAL,CAAY,IAAZ,CAAiB,iBAAiB,cAAc,OAAd,KAA0B,OAA5D,CAAP;AACD,CAND;;AAQA,WAAW,OAAX,CAAmB,QAAnB,GAA8B,UAAU,OAAV,EAAmB,OAAnB,EAA4B,gBAA5B,EAA8C;AAC1E,MAAI,OAAO,OAAP,KAAmB,QAAvB,EAAiC;AAC/B;AACA,cAAU,QAAQ,OAAlB;AACA,uBAAmB,QAAQ,gBAA3B;AACA,cAAU,QAAQ,OAAlB;AACA;AACD;AACD,MAAI,KAAK,MAAT,EAAiB;AACf,UAAM,kBAAkB,KAAK,MAAL,CAAY,IAAZ,CAAiB,SAAS,MAAM,OAAN,KAAkB,OAA5C,CAAxB;AACA,QAAI,eAAJ,EAAqB;AACnB,sBAAgB,OAAhB,GAA0B,gBAAgB,OAAhB,IAA2B,OAArD;AACA,sBAAgB,gBAAhB,GAAmC,gBAAgB,gBAAhB,IAAoC,gBAAvE;AACA;AACD;AACF,GAPD,MAOO;AACL,SAAK,MAAL,GAAc,EAAd;AACD;AACD,OAAK,MAAL,CAAY,IAAZ,CAAiB,EAAE,OAAF,EAAW,OAAX,EAAoB,gBAApB,EAAjB;AACD,CAnBD;;AAqBA,WAAW,OAAX,CAAmB,qBAAnB,GAA2C,YAAY;AACrD,MAAI,KAAK,OAAL,IAAgB,KAAK,OAAL,CAAa,kBAA7B,IAAmD,KAAK,MAA5D,EAAoE;AAClE,WAAO,KAAK,MAAL,CAAY,MAAZ,CAAmB,SAAS,MAAM,OAAN,IAAiB,MAAM,gBAAnD,CAAP;AACD;AACD,SAAO,EAAP;AACD,CALD;;AAOA,WAAW,GAAX,CAAe,QAAf,EAAyB;AACvB,aAAW,CAAC,GAAD,EAAM,GAAN,KAAc;AACvB,WAAO,IAAI,GAAX;AACA,WAAO,IAAI,GAAX;AACA,WAAO,IAAI,EAAX;AACA,WAAO,IAAI,KAAX;AACD;AANsB,CAAzB;;kBASe,mBAAS,KAAT,CAAe,MAAf,EAAuB,UAAvB,C","file":"user.js","sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst UserSchema = new mongoose.Schema({\r\n  name: String,\r\n  emails: [{\r\n    address: String,\r\n    trusted: Boolean,\r\n    sendNotification: Boolean,\r\n  }],\r\n  ip: String,\r\n  options: {\r\n    notificateViaEmail: Boolean,\r\n    notificateViaNative: Boolean,\r\n    notificateViaPopup: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n  },\r\n  token: {\r\n    type: String,\r\n    unique: true,\r\n    sparse: true,\r\n  },\r\n  facebookId: {\r\n    type: String,\r\n    unique: true,\r\n    sparse: true,\r\n  },\r\n  githubId: {\r\n    type: String,\r\n    unique: true,\r\n    sparse: true,\r\n  },\r\n});\r\n\r\nUserSchema.methods.mergeOptions = function (options) {\r\n  this.options = this.options || {};\r\n  this.options.notificateViaEmail =\r\n    this.options.notificateViaEmail || options.notificateViaEmail;\r\n  this.options.notificateViaNative =\r\n    this.options.notificateViaNative || options.notificateViaNative;\r\n  this.options.notificateViaPopup =\r\n    this.options.notificateViaPopup || options.notificateViaPopup;\r\n};\r\n\r\nUserSchema.methods.findEmail = function (email) {\r\n  let address = email;\r\n  if (typeof email === 'object') {\r\n    address = email.address;\r\n  }\r\n  return this.emails.find(existingEmail => existingEmail.address === address);\r\n};\r\n\r\nUserSchema.methods.addEmail = function (address, trusted, sendNotification) {\r\n  if (typeof address === 'object') {\r\n    /* eslint-disable */\r\n    trusted = address.trusted;\r\n    sendNotification = address.sendNotification;\r\n    address = address.address;\r\n    /* eslint-enable */\r\n  }\r\n  if (this.emails) {\r\n    const existingAddress = this.emails.find(email => email.address === address);\r\n    if (existingAddress) {\r\n      existingAddress.trusted = existingAddress.trusted || trusted;\r\n      existingAddress.sendNotification = existingAddress.sendNotification || sendNotification;\r\n      return;\r\n    }\r\n  } else {\r\n    this.emails = [];\r\n  }\r\n  this.emails.push({ address, trusted, sendNotification });\r\n};\r\n\r\nUserSchema.methods.getNotificationEmails = function () {\r\n  if (this.options && this.options.notificateViaEmail && this.emails) {\r\n    return this.emails.filter(email => email.trusted && email.sendNotification);\r\n  }\r\n  return [];\r\n};\r\n\r\nUserSchema.set('toJSON', {\r\n  transform: (doc, ret) => {\r\n    delete ret._id;\r\n    delete ret.__v;\r\n    delete ret.ip;\r\n    delete ret.token;\r\n  },\r\n});\r\n\r\nexport default mongoose.model('User', UserSchema);\r\n"]}