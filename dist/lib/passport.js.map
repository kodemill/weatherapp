{"version":3,"sources":["../../src/lib/passport.js"],"names":[],"mappings":"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","file":"passport.js","sourcesContent":["import fetch from 'node-fetch';\nimport passport from 'koa-passport';\nimport { auth } from '../../config';\nimport { Strategy as GithubStrategy } from 'passport-github';\nimport { Strategy as FacebookStrategy } from 'passport-facebook';\nimport { Strategy as JwtStrategy, ExtractJwt } from 'passport-jwt';\nimport User from '../model/user';\nimport { mergeAccounts } from '../controller/user';\n\nconst fetchEmailFromGithub = async accessToken => {\n  try {\n    const response = await fetch('https://api.github.com/user/emails', {\n      headers: {\n        Authorization: `token ${accessToken}`,\n      },\n    });\n    if (response.ok) {\n      // [ { email: '', primary: true, verified: true } ]\n      return (await response.json())\n        .filter(githubEmail => githubEmail.verified)\n        .map(githubEmail => githubEmail.email);\n    }\n  } catch (err) {\n    console.log(`getEmail@github err: ${err.toString()} `);\n  }\n};\n\nconst verifyCallback = async (social, req, accessToken, _, profile, done) => {\n  try {\n    const socialIdKey = `${social}Id`;\n    const userId = req.query.state;\n    if (userId) {\n      // previous account\n      const user = await User.findById(userId);\n      let emails;\n      if (social === 'github') {\n        emails = await fetchEmailFromGithub(accessToken);\n      } else if (profile.emails && profile.emails.length > 0) {\n        emails = profile.emails.map(passportEmail => passportEmail.value);\n      }\n      // save email\n      if (emails) {\n        emails.forEach(email => user.addEmail({\n          address: email,\n          trusted: true,\n        }));\n      }\n      // save username\n      user.name = profile.displayName;\n      // connect\n      user[socialIdKey] = profile.id;\n      // check if theres an existing account for this social\n      const currentUser = await User.findOne({ [socialIdKey]: profile.id });\n      if (currentUser) {\n        // keep the existing drop the previous (anonymus)\n        mergeAccounts(currentUser, user);\n        return done(null, currentUser);\n      }\n      await user.save();\n      return done(null, user);\n    }\n    return done(null, false);\n  } catch (err) {\n    return done(err);\n  }\n};\n\nconst providerCallbackHandler = strategy => async (ctx, next) => {\n  await passport.authenticate(strategy, user => {\n    if (user) {\n      ctx.redirect(`/user/${user.token}`);\n    } else {\n      ctx.redirect('/');\n    }\n  })(ctx, next);\n};\n\nconst providerHandler = strategy => (ctx, next) =>\n  passport.authenticate(strategy, {\n    session: false,\n    scope: strategy === 'facebook' ? ['email'] : ['user:email'],\n    state: ctx.user.id, // story userId\n  })(ctx, next);\n\npassport.use(new GithubStrategy({\n  clientID: auth.githubAppId,\n  clientSecret: auth.githubAppSecret,\n  callbackURL: auth.githubLoginCallback,\n  passReqToCallback: true,\n}, verifyCallback.bind(null, 'github')));\n\npassport.use(new FacebookStrategy({\n  clientID: auth.facebookAppId,\n  clientSecret: auth.facebookAppSecret,\n  callbackURL: auth.facebookLoginCallback,\n  profileFields: ['id', 'emails', 'name'],\n  passReqToCallback: true,\n}, verifyCallback.bind(null, 'facebook')));\n\npassport.use(new JwtStrategy({\n  secretOrKey: auth.jwtSecret,\n  jwtFromRequest: ExtractJwt.fromExtractors([\n    ExtractJwt.fromAuthHeader(),\n    ExtractJwt.fromUrlQueryParameter('jwt'),\n  ]),\n}, (payload, done) => User.findById(payload.id, done)));\n\npassport.use('email-jwt', new JwtStrategy({\n  secretOrKey: auth.jwtSecret,\n  jwtFromRequest: ExtractJwt.fromExtractors([\n    ExtractJwt.fromUrlQueryParameter('jwt'),\n  ]),\n}, async (payload, done) => {\n  try {\n    const user = await User.findOne({\n      _id: payload.id,\n      'emails.address': payload.email,\n    });\n    if (!user) {\n      return done(null, false);\n    }\n    user.email = payload.email;\n    return done(null, user);\n  } catch (err) {\n    return done(err);\n  }\n}));\n\nexport default passport;\nexport { providerCallbackHandler, providerHandler };\n"]}