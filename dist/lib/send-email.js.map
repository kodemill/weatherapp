{"version":3,"sources":["../../src/lib/send-email.js"],"names":[],"mappings":";;;;;;;;;AAAA;;;;AACA;;AACA;;;;;;AAEA,MAAM,wBAAwB,CAAC,EAAD,EAAK,KAAL,KAAe,uBAAI,IAAJ,CAAS,EAAE,EAAF,EAAM,KAAN,EAAT,EAAwB,aAAK,SAA7B,CAA7C;;AAEA,MAAM,oBAAoB,QACzB;;;;;;OAAA,CAMM,IAAK;;QAPZ;;AAWA,MAAM,SAAU,IAAE,YAAI,GAAI,OAA1B;AACA,MAAM,4BAA4B,CAAC,KAAD,EAAQ,QAAR,EAAkB,MAAlB;AAClC;AACC,UAAQ,SAAS,IAAT,CAAc,IAAK;;qBAAA,CAEP,SAAS,SAAU,WAAQ,SAAS,WAAY,UAAO,SAAS,IAAT,CAAc,IAAK,OAAI,SAAS,IAAT,CAAc,OAAQ;wBAAA,CACjG,OAAO,WAAY;gCAAA,CACX,MAAO,4BAAyB,SAAS,EAAG,UAAO,SAAS,IAAT,CAAc,KAAM;;oDAAA,CAEnD,MAAO,iCAA8B,KAAM,0BAR/F;AASA;;AAEA,MAAM,4BAA4B;AAClC;AACC;;wDAAA,CAEuD,MAAO,4BAAyB,KAAM;;;;;;;oBAJ9F;AAYA;;AAEA,IAAI,WAAJ;AACA,MAAM,oBAAoB,MAAM;AAC9B,gBAAc,qBAAW,eAAX,CAA4B,YAAU,cAAY,OAAQ,MAAG,cAAY,QAAS,kBAAlF,CAAd;AACD,CAFD;;AAIA,MAAM,qBAAqB;AACzB,QAAM,oBADmB;AAEzB,WAAS;AAFgB,CAA3B;;AAKA,MAAM,WAAW,eAAe,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAqB;AAC/D,MAAI,CAAC,WAAL,EAAkB;AAChB;AACD;AACD,QAAM,uBACD,kBADC,EAED,WAFC,CAAN;AAIA,cAAY,QAAZ,CAAqB,OAArB,EAA8B,CAAC,KAAD,EAAQ,IAAR,KAAiB;AAC7C,QAAI,KAAJ,EAAW;AACT,aAAO,KAAP;AACD,KAFD,MAEO;AACL,cAAQ,IAAR;AACD;AACF,GAND;AAOD,CAf+B,CAAhC;;AAiBA,MAAM,wBAAwB,CAAC,IAAD,EAAO,KAAP,KAAiB,SAAS;AACtD,WAAS,+BAD6C;AAEtD,QAAM,0BAA0B,sBAAsB,KAAK,EAA3B,EAA+B,MAAM,OAArC,CAA1B,CAFgD;AAGtD,MAAI,MAAM;AAH4C,CAAT,CAA/C;;AAMA,MAAM,wBAAwB,CAAC,QAAD,EAAW,MAAX,KAAsB;AAClD,QAAM,SAAS,SAAS,IAAT,CAAc,qBAAd,GAAsC,GAAtC,CAA0C,SAAS,MAAM,OAAzD,CAAf;AACA,QAAM,SAAS,OAAO,GAAP,CAAW,SAAS,sBAAsB,SAAS,IAAT,CAAc,EAApC,EAAwC,KAAxC,CAApB,CAAf;AACA,SAAO,QAAQ,GAAR,CAAY,OAAO,GAAP,CAAW,CAAC,KAAD,EAAQ,GAAR,KAAgB,SAAS;AACrD,UAAM,kBAAkB,0BAA0B,OAAO,GAAP,CAA1B,EAAuC,QAAvC,EAAiD,MAAjD,CAAlB,CAD+C;AAErD,QAAI;AAFiD,GAAT,CAA3B,CAAZ,CAAP;AAID,CAPD;;QASS,qB,GAAA,qB;QAAuB,qB,GAAA,qB;kBACjB,Q","file":"send-email.js","sourcesContent":["import nodemailer from 'nodemailer';\nimport { email as emailConfig, app, auth } from '../../config';\nimport jwt from 'jsonwebtoken';\n\nconst generateTokenForEmail = (id, email) => jwt.sign({ id, email }, auth.jwtSecret);\n\nconst htmlEmailTemplate = body =>\n`<!DOCTYPE html>\n<html lang=\"en-US\">\n <head>\n     <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n </head>\n <body>\n     ${body}\n </body>\n</html>`;\n\nconst apiUrl = `${app.url}/api`;\nconst notificationEmailTemplate = (token, criteria, report) =>\n/* eslint-disable */\n`Hello ${criteria.user.name},\n<br><br>\nThe temperature is ${criteria.predicate} than ${criteria.temperature}℃ in ${criteria.city.name} (${criteria.city.country}),\nour latest report was ${report.temperature}℃ for that location.<br>\nTo acknoweledge that <a href=\"${apiUrl}/criteria/acknoweledge/${criteria.id}?jwt=${criteria.user.token}\">click here</a>.\n<br><br>\nIf you don't want to receive more emails <a href=\"${apiUrl}/auth/email/unsubscribe?jwt=${token}\">unsubscribe here</a>.`;\n/* eslint-enable */\n\nconst verificationEmailTemplate = token =>\n/* eslint-disable */\n`Hello there,\n<br>\nIf you know why you have received this email <a href=\"${apiUrl}/auth/email/verify?jwt=${token}\">click here</a>\n to confirm that the address is yours.\n<br>\nOtherwise, just ignore it.\n<br>\n<br>\nSincerely,\na concerned spammer`;\n/* eslint-enable */\n\nlet transporter;\nconst createTransporter = () => {\n  transporter = nodemailer.createTransport(`smtps://${emailConfig.account}:${emailConfig.password}@smtp.gmail.com`);\n};\n\nconst defaultMailOptions = {\n  from: 'WeatherApp noreply',\n  subject: 'WeatherApp notification',\n};\n\nconst sendMail = mailOptions => new Promise((resolve, reject) => {\n  if (!transporter) {\n    createTransporter();\n  }\n  const options = {\n    ...defaultMailOptions,\n    ...mailOptions,\n  };\n  transporter.sendMail(options, (error, info) => {\n    if (error) {\n      reject(error);\n    } else {\n      resolve(info);\n    }\n  });\n});\n\nconst sendVerificationEmail = (user, email) => sendMail({\n  subject: 'WeatherApp email verification',\n  html: verificationEmailTemplate(generateTokenForEmail(user.id, email.address)),\n  to: email.address,\n});\n\nconst sendNotificationEmail = (criteria, report) => {\n  const emails = criteria.user.getNotificationEmails().map(email => email.address);\n  const tokens = emails.map(email => generateTokenForEmail(criteria.user.id, email));\n  return Promise.all(emails.map((email, idx) => sendMail({\n    html: htmlEmailTemplate(notificationEmailTemplate(tokens[idx], criteria, report)),\n    to: email,\n  })));\n};\n\nexport { sendVerificationEmail, sendNotificationEmail };\nexport default sendMail;\n"]}