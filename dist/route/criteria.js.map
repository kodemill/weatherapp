{"version":3,"sources":["../../src/route/criteria.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;;;;;kBAEe,UAAU;AACvB,SAAO,GAAP,CAAW,sEAAX;AAAA,iCAAmF,WAAM,GAAN,EAAa;AAC9F,UAAI;AACF,YAAI,IAAJ,GAAW,MAAM,0BAA0B,YAA1B,cACZ,IAAI,MADQ;AAEf,gBAAM,IAAI;AAFK,WAAjB;AAID,OALD,CAKE,OAAO,GAAP,EAAY;AACZ,YAAI,IAAI,gBAAR,EAA0B;AACxB,cAAI,IAAJ,GAAW,EAAE,kBAAkB,IAAI,gBAAxB,EAAX;AACD,SAFD,MAEO;AACL,gBAAM,GAAN;AACD;AACF;AACF,KAbD;;AAAA;AAAA;AAAA;AAAA;AAcA,SAAO,IAAP,CAAY,sEAAZ;AAAA,kCAAoF,WAAM,GAAN,EAAa;AAC/F,UAAI,IAAJ,GAAW,MAAM,0BAA0B,YAA1B,cACZ,IAAI,MADQ;AAEf,cAAM,IAAI;AAFK,UAGd,IAHc,CAAjB;AAID,KALD;;AAAA;AAAA;AAAA;AAAA;AAMA,SAAO,GAAP,CAAW,WAAX;AAAA,kCAAwB,WAAM,GAAN,EAAa;AACnC,UAAI,IAAJ,GAAW,MAAM,0BAA0B,aAA1B,CAAwC,IAAI,IAA5C,CAAjB;AACD,KAFD;;AAAA;AAAA;AAAA;AAAA;AAGA,SAAO,GAAP,CAAW,uBAAX;AAAA,kCAAoC,WAAM,GAAN,EAAa;AAC/C,YAAM,0BAA0B,aAA1B,CAAwC,IAAI,IAA5C,EAAkD,IAAI,MAAJ,CAAW,UAA7D,CAAN;AACA,UAAI,IAAJ,GAAW,EAAE,SAAS,yBAAX,EAAX;AACD,KAHD;;AAAA;AAAA;AAAA;AAAA;AAIA,SAAO,GAAP,CAAW,8BAAX;AAAA,kCAA2C,WAAM,GAAN,EAAa;AACtD,UAAI,IAAJ,GAAW,MAAM,0BACd,yBADc,CACY,IAAI,IADhB,EACsB,IAAI,MAAJ,CAAW,IADjC,CAAjB;AAED,KAHD;;AAAA;AAAA;AAAA;AAAA;AAIA,SAAO,GAAP,CAAW,qBAAX;AAAA,kCAAkC,WAAM,GAAN,EAAa;AAC7C,UAAI,IAAJ,GAAW,MAAM,0BAA0B,sBAA1B,CAAiD,IAAI,IAArD,CAAjB;AACD,KAFD;;AAAA;AAAA;AAAA;AAAA;AAGA,SAAO,GAAP,CAAW,mBAAX;AAAA,kCAAgC,WAAM,GAAN,EAAa;AAC3C,UAAI,IAAJ,GAAW,MAAM,0BAA0B,oBAA1B,CAA+C,IAAI,IAAnD,CAAjB;AACD,KAFD;;AAAA;AAAA;AAAA;AAAA;AAGA,SAAO,GAAP,CAAW,sCAAX;AAAA,kCAAmD,WAAM,GAAN,EAAa;AAC9D,UAAI,IAAJ,GAAW,MAAM,0BACd,sCADc,CACyB,IAAI,IAD7B,CAAjB;AAED,KAHD;;AAAA;AAAA;AAAA;AAAA;AAIA,QAAM;AAAA,kCAAuB,WAAM,GAAN,EAAa;AACxC,UAAI,IAAJ,GAAW,MAAM,0BACd,sBADc,CACS,IAAI,IADb,EACmB,IAAI,MAAJ,CAAW,WAAX,CAAuB,KAAvB,CAA6B,GAA7B,CADnB,CAAjB;AAED,KAHK;;AAAA;AAAA;AAAA;AAAA,MAAN;AAIA,SAAO,IAAP,CAAY,qCAAZ,EAAmD,oBAAnD;AACA,SAAO,GAAP,CAAW,qCAAX,EAAkD,oBAAlD;AACD,C","file":"criteria.js","sourcesContent":["import WeatherCriteriaController from '../controller/weather-criteria';\n\nexport default router => {\n  router.put('/criteria/city/:cityId/temperature/:temperature/predicate/:predicate', async ctx => {\n    try {\n      ctx.body = await WeatherCriteriaController.saveCriteria({\n        ...ctx.params,\n        user: ctx.user,\n      });\n    } catch (err) {\n      if (err.existingCriteria) {\n        ctx.body = { existingCriteria: err.existingCriteria };\n      } else {\n        throw err;\n      }\n    }\n  });\n  router.post('/criteria/city/:cityId/temperature/:temperature/predicate/:predicate', async ctx => {\n    ctx.body = await WeatherCriteriaController.saveCriteria({\n      ...ctx.params,\n      user: ctx.user,\n    }, true);\n  });\n  router.get('/criteria', async ctx => {\n    ctx.body = await WeatherCriteriaController.getAllForUser(ctx.user);\n  });\n  router.del('/criteria/:criteriaId', async ctx => {\n    await WeatherCriteriaController.deleteForUser(ctx.user, ctx.params.criteriaId);\n    ctx.body = { message: 'criteria delete success' };\n  });\n  router.get('/criteria/updatedafter/:date', async ctx => {\n    ctx.body = await WeatherCriteriaController\n      .getAllUpdatedAfterForUser(ctx.user, ctx.params.date);\n  });\n  router.get('/criteria/fulfilled', async ctx => {\n    ctx.body = await WeatherCriteriaController.getAllFulfilledForUser(ctx.user);\n  });\n  router.get('/criteria/pending', async ctx => {\n    ctx.body = await WeatherCriteriaController.getAllPendingForUser(ctx.user);\n  });\n  router.get('/criteria/fulfilled/notacknoweledged', async ctx => {\n    ctx.body = await WeatherCriteriaController\n      .getAllFulfilledNotAcknoweledgedForUser(ctx.user);\n  });\n  const acknoweledgeCriteria = async ctx => {\n    ctx.body = await WeatherCriteriaController\n      .acknoweledgeAllForUser(ctx.user, ctx.params.criteriaIds.split(','));\n  };\n  router.post('/criteria/acknoweledge/:criteriaIds', acknoweledgeCriteria);\n  router.get('/criteria/acknoweledge/:criteriaIds', acknoweledgeCriteria);\n};\n"]}