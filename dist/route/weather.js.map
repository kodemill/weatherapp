{"version":3,"sources":["../../src/route/weather.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;kBAEe,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAO,GAAP,CAAW,uBAAX;AAAA,iCAAoC,WAAM,GAAN,EAAa;AAC/C,UAAI,IAAJ,GAAW,CAAC,MAAM,2BACf,OADe,CACP,EAAE,MAAM,IAAI,MAAJ,CAAW,MAAnB,EADO,EAEf,QAFe,CAEN,eAFM,CAAP,EAGR,aAHH;AAID,KALD;;AAAA;AAAA;AAAA;AAAA;AAMA,SAAO,GAAP,CAAW,0BAAX;AAAA,kCAAuC,WAAM,GAAN,EAAa;AAClD,UAAI,IAAJ,GAAW,CAAC,MAAM,2BACf,IADe,CACV,EAAE,MAAM,EAAE,KAAK,IAAI,MAAJ,CAAW,OAAX,CAAmB,KAAnB,CAAyB,GAAzB,CAAP,EAAR,EADU,EAEf,QAFe,CAEN,eAFM,CAAP,EAGR,GAHQ,CAGJ;AAAA,eAAuB,oBAAoB,aAA3C;AAAA,OAHI,CAAX;AAID,KALD;;AAAA;AAAA;AAAA;AAAA;AAMD,C","file":"weather.js","sourcesContent":["import { LatestWeatherReport } from '../model';\r\n// import fetchWeather from '../lib/fetch-weather';\r\n\r\nexport default router => {\r\n  // router.get('/weather/fetch/city/:cityId', async ctx => {\r\n  //   try {\r\n  //     const weather = await fetchWeather(ctx.params.cityId);\r\n  //     ctx.body = weather;\r\n  //   } catch (err) {\r\n  //     ctx.throw(constants.thirdParty);\r\n  //   }\r\n  // });\r\n  // router.get('/weather/fetch/cities/:cityIds', async ctx => {\r\n  //   try {\r\n  //     const weather = await fetchWeather(ctx.params.cityIds);\r\n  //     ctx.body = weather;\r\n  //   } catch (err) {\r\n  //     ctx.throw(constants.thirdParty);\r\n  //   }\r\n  // });\r\n  router.get('/weather/city/:cityId', async ctx => {\r\n    ctx.body = (await LatestWeatherReport\r\n      .findOne({ city: ctx.params.cityId })\r\n      .populate('weatherReport'))\r\n      .weatherReport;\r\n  });\r\n  router.get('/weather/cities/:cityIds', async ctx => {\r\n    ctx.body = (await LatestWeatherReport\r\n      .find({ city: { $in: ctx.params.cityIds.split(',') } })\r\n      .populate('weatherReport'))\r\n      .map(latestWeatherReport => latestWeatherReport.weatherReport);\r\n  });\r\n};\r\n"]}