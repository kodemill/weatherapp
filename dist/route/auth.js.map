{"version":3,"sources":["../../src/route/auth.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;AACA;;;;AACA;;AACA;;IAAY,c;;;;;;;;AAEZ;AACA,MAAM,iBAAiB,KAAvB;;kBAEe,UAAU;AACvB,SAAO,GAAP,CAAW,gBAAX,EACE,kCADF,EAEE,+BAAgB,UAAhB,CAFF;AAGA,SAAO,GAAP,CAAW,yBAAX,EACE,uCAAwB,UAAxB,CADF;AAEA,SAAO,GAAP,CAAW,cAAX,EACE,kCADF,EAEE,+BAAgB,QAAhB,CAFF;AAGA,SAAO,GAAP,CAAW,uBAAX,EACE,uCAAwB,QAAxB,CADF;AAEA,SAAO,IAAP,CAAY,gBAAZ;AAAA,iCAA8B,WAAM,GAAN,EAAa;AACzC;AACA,YAAM,KAAK,IAAI,EAAf;AACA,UAAI,IAAJ;AACA,UAAI,mBAAmB,OAAO,MAAM,eAAK,OAAL,CAAa,EAAE,EAAF,EAAb,CAAhC,CAAJ,EAA2D;AACzD,YAAI,KAAJ,CAAU,GAAV,EAAe,oBAAU,SAAzB;AACD;AACD,aAAO,MAAM,eAAK,MAAL,CAAY,EAAE,EAAF,EAAZ,CAAb;AACA;AACA,YAAM,QAAQ,uBAAI,IAAJ,CAAS,EAAE,IAAI,KAAK,EAAX,EAAT,EAA0B,aAAK,SAA/B,CAAd;AACA,YAAM,KAAK,MAAL,CAAY,EAAE,KAAF,EAAZ,CAAN;AACA,UAAI,IAAJ,GAAW,EAAE,KAAF,EAAX;AACD,KAZD;;AAAA;AAAA;AAAA;AAAA;AAaA,SAAO,GAAP,CAAW,oBAAX,EAAiC,iCAAgB,IAAhB,CAAjC;AAAA,kCAAwD,WAAM,GAAN,EAAa;AACnE,YAAM,eAAe,yBAAf,CAAyC,IAAI,IAA7C,EAAmD,IAAI,KAAvD,CAAN;AACA;AACA,UAAI,QAAJ,CAAa,WAAb;AACD,KAJD;;AAAA;AAAA;AAAA;AAAA;AAKA,SAAO,GAAP,CAAW,yBAAX,EAAsC,iCAAgB,IAAhB,CAAtC;AAAA,kCAA6D,WAAM,GAAN,EAAa;AACxE,YAAM,eAAe,8BAAf,CAA8C,IAAI,IAAlD,EAAwD,IAAI,KAA5D,CAAN;AACA,UAAI,IAAJ,GAAW,EAAE,SAAS,wBAAX,EAAX;AACA,UAAI,QAAJ,CAAa,WAAb;AACD,KAJD;;AAAA;AAAA;AAAA;AAAA;AAKD,C","file":"auth.js","sourcesContent":["import constants from '../constants';\r\nimport User from '../model/user';\r\nimport { providerHandler, providerCallbackHandler } from '../lib/passport';\r\nimport { isAuthenticated } from '../middleware';\r\nimport jwt from 'jsonwebtoken';\r\nimport { auth } from '../../config';\r\nimport * as UserController from '../controller/user';\r\n\r\n// FIXME cleanup and/or better protection\r\nconst hackFilterByIp = false;\r\n\r\nexport default router => {\r\n  router.get('/auth/facebook',\r\n    isAuthenticated(),\r\n    providerHandler('facebook'));\r\n  router.get('/auth/facebook/callback',\r\n    providerCallbackHandler('facebook'));\r\n  router.get('/auth/github',\r\n    isAuthenticated(),\r\n    providerHandler('github'));\r\n  router.get('/auth/github/callback',\r\n    providerCallbackHandler('github'));\r\n  router.post('/auth/register', async ctx => {\n    // register anonym users and generate tokens for them\n    const ip = ctx.ip;\n    let user;\n    if (hackFilterByIp && (user = await User.findOne({ ip }))) {\n      ctx.throw(403, constants.forbidden);\n    }\n    user = await User.create({ ip });\n    // only claim is id\n    const token = jwt.sign({ id: user.id }, auth.jwtSecret);\n    await user.update({ token });\n    ctx.body = { token };\n  });\n  router.get('/auth/email/verify', isAuthenticated(true), async ctx => {\r\n    await UserController.verifyEmailForUserViaMail(ctx.user, ctx.email);\r\n    // ctx.body = { message: 'email verified' };\r\n    ctx.redirect('/settings');\r\n  });\r\n  router.get('/auth/email/unsubscribe', isAuthenticated(true), async ctx => {\r\n    await UserController.unsubscribeEmailForUserViaMail(ctx.user, ctx.email);\r\n    ctx.body = { message: 'unsubscribe successful' };\r\n    ctx.redirect('/settings');\r\n  });\r\n};\r\n"]}