{"version":3,"sources":["../../src/route/city.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;;;;;kBAEe,UAAU;AACvB,SAAO,GAAP,CAAW,WAAX;AAAA,iCAAwB,WAAM,GAAN,EAAa;AACnC,YAAM,KAAK,OAAO,IAAI,MAAJ,CAAW,EAAlB,CAAX;AACA,UAAI,IAAJ;AACA,UAAI,OAAO,SAAP,CAAiB,EAAjB,CAAJ,EAA0B;AACxB,eAAO,MAAM,eAAK,QAAL,CAAc,IAAI,MAAJ,CAAW,EAAzB,CAAb;AACD;AACD,UAAI,IAAJ,EAAU;AACR,YAAI,IAAJ,GAAW,IAAX;AACD,OAFD,MAEO;AACL,YAAI,KAAJ,CAAU,oBAAU,QAApB,EAA8B,GAA9B;AACD;AACF,KAXD;;AAAA;AAAA;AAAA;AAAA;AAYA,SAAO,GAAP,CAAW,kBAAX;AAAA,kCAA+B,WAAM,GAAN,EAAa;AAC1C,UAAI,QAAQ,oBAAU,SAAtB;AACA,YAAM,WAAW,OAAO,IAAI,OAAJ,CAAY,KAAZ,CAAkB,KAAzB,CAAjB;AACA,UAAI,OAAO,SAAP,CAAiB,QAAjB,KAA8B,WAAW,KAA7C,EAAoD;AAClD,gBAAQ,QAAR;AACD;AACD,YAAM,aAAa,IAAI,MAAJ,CAAW,IAAX,CAAgB,WAAhB,EAAnB;AACA;AACA,YAAM,SAAS,MAAM,eAAK,IAAL,CAAU;AAC7B,gBAAQ;AACN,kBAAS,KAAG,UAAW,GADjB;AAEN,oBAAU;AAFJ;AADqB,OAAV,EAKlB,KALkB,CAKZ,QAAQ,CALI,CAArB;AAMA,UAAI,YAAY,KAAhB;AACA,UAAI,OAAO,MAAP,GAAgB,KAApB,EAA2B;AACzB,eAAO,MAAP,GAAgB,KAAhB;AACA,oBAAY,IAAZ;AACD;AACD,YAAM,QAAQ,OAAO,MAArB;AACA,UAAI,IAAJ,GAAW;AACT,iBADS;AAET,aAFS;AAGT;AAHS,OAAX;AAKD,KAzBD;;AAAA;AAAA;AAAA;AAAA;AA0BA,SAAO,GAAP,CAAW,6BAAX;AAAA,kCAA0C,WAAM,GAAN,EAAa;AACrD,YAAM,SAAS,IAAI,MAAJ,CAAW,WAAX,CAAuB,KAAvB,CAA6B,GAA7B,EAAkC,GAAlC,CAAsC,MAAtC,CAAf;AACA,UAAI,OAAO,MAAP,KAAkB,CAAtB,EAAyB;AACvB,YAAI,KAAJ,CAAU,oBAAU,cAApB,EAAoC,GAApC;AACD;AACD,UAAI,IAAJ,GAAW,MAAM,eAAK,OAAL,CAAa;AAC5B,kBAAU;AACR,iBAAO;AACL,uBAAW;AACT,oBAAM,OADG;AAET,2BAAa,CAAC,OAAO,CAAP,CAAD,EAAY,OAAO,CAAP,CAAZ;AAFJ;AADN;AADC;AADkB,OAAb,CAAjB;AAUD,KAfD;;AAAA;AAAA;AAAA;AAAA;AAgBD,C","file":"city.js","sourcesContent":["import City from '../model/city';\nimport constants from '../constants';\n\nexport default router => {\n  router.get('/city/:id', async ctx => {\n    const id = Number(ctx.params.id);\n    let city;\n    if (Number.isInteger(id)) {\n      city = await City.findById(ctx.params.id);\n    }\n    if (city) {\n      ctx.body = city;\n    } else {\n      ctx.throw(constants.notFound, 404);\n    }\n  });\n  router.get('/city/name/:name', async ctx => {\n    let limit = constants.listLimit;\n    const reqLimit = Number(ctx.request.query.limit);\n    if (Number.isInteger(reqLimit) && reqLimit < limit) {\n      limit = reqLimit;\n    }\n    const cityNameLC = ctx.params.name.toLowerCase();\n    // hack to check if theres more\n    const cities = await City.find({\n      nameLC: {\n        $regex: `^${cityNameLC}`,\n        $options: '',\n      },\n    }).limit(limit + 1);\n    let truncated = false;\n    if (cities.length > limit) {\n      cities.length = limit;\n      truncated = true;\n    }\n    const count = cities.length;\n    ctx.body = {\n      truncated,\n      count,\n      cities,\n    };\n  });\n  router.get('/city/location/:coordinates', async ctx => {\n    const coords = ctx.params.coordinates.split(',').map(Number);\n    if (coords.length !== 2) {\n      ctx.throw(constants.malformedQuery, 400);\n    }\n    ctx.body = await City.findOne({\n      location: {\n        $near: {\n          $geometry: {\n            type: 'Point',\n            coordinates: [coords[0], coords[1]],\n          },\n        },\n      },\n    });\n  });\n};\n"]}