{"version":3,"sources":["../../src/controller/weather-criteria.js"],"names":[],"mappings":"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","file":"weather-criteria.js","sourcesContent":["import { WeatherCriteria, City } from '../model';\r\nimport constants from '../constants';\r\n\r\nconst getAllPending = () => WeatherCriteria\r\n  .find({ fulfilledAt: null });\r\n\r\nconst getAllFulfilledNotAcknoweledged = () =>\r\n  WeatherCriteria.find({\r\n    fulfilledAt: { $ne: null },\r\n    acknoweledgedAt: null,\r\n  });\r\n\r\nconst fulfill = criteria => {\r\n  criteria.fulfilledAt = Date.now();\r\n  return criteria.save();\r\n};\r\n\r\nconst tryFulfillFromReports = async (criteria, reports) =>\r\n  await Promise.all(\r\n    criteria.filter(criterion => {\r\n      const cityReport = reports.find(report => report.city === criterion.city);\r\n      return cityReport && criterion.isFulfilledWithTemperature(cityReport.temperature);\r\n    })\r\n    .map(fulfill)\r\n  );\r\n\r\nconst saveCriteria = async (criteria, overwriteExisting) => {\r\n  if (criteria.predicate !== 'less' && criteria.predicate !== 'greater') {\r\n    throw new Error('wrong predicate');\r\n  }\r\n  if (!criteria.user) {\r\n    throw new Error('user not found');\r\n  }\r\n  const city = await City.findById(criteria.cityId);\r\n  if (!city) {\r\n    throw new Error('city not found');\r\n  }\r\n  const existingCriteria = await WeatherCriteria.findOne({\r\n    user: criteria.user,\r\n    city,\r\n    predicate: criteria.predicate,\r\n    fulfilledAt: null,\r\n  });\r\n  if (existingCriteria) {\r\n    if (!overwriteExisting) {\r\n      const err = new Error('criteria already exists');\r\n      err.existingCriteria = existingCriteria;\r\n      throw err;\r\n    } else {\r\n      existingCriteria.temperature = criteria.temperature;\r\n      return await existingCriteria.save();\r\n    }\r\n  }\r\n  return await WeatherCriteria.create({\r\n    user: criteria.user,\r\n    city,\r\n    predicate: criteria.predicate,\r\n    temperature: criteria.temperature,\r\n  });\r\n};\r\n\r\nconst getAllUpdatedAfterForUser = async (user, updatedAfter) =>\r\n  await WeatherCriteria.find({\r\n    user,\r\n    updatedAt: { $gte: new Date(updatedAfter) },\r\n  }).limit(constants.listLimit)\r\n  .populate('city');\r\n\r\nconst getAllForUser = async user =>\r\n  await WeatherCriteria.find({ user }).limit(constants.listLimit).populate('city');\r\n\r\nconst getAllPendingForUser = async user =>\r\n  await WeatherCriteria.find({ user, fulfilledAt: null })\r\n    .limit(constants.listLimit)\r\n    .populate('city');\r\n\r\nconst getAllFulfilledForUser = async user =>\r\n  await WeatherCriteria.find({ user, fulfilledAt: { $ne: null } })\r\n  .limit(constants.listLimit)\r\n  .populate('city');\r\n\r\nconst getAllFulfilledNotAcknoweledgedForUser = async user =>\r\n  await WeatherCriteria.find({\r\n    user,\r\n    fulfilledAt: { $ne: null },\r\n    acknoweledgedAt: null,\r\n  }).limit(constants.listLimit)\r\n  .populate('city');\r\n\r\nconst acknoweledgeForUser = async (user, criteriaId) => {\r\n  const criteria = await WeatherCriteria.findOne({ user, _id: criteriaId }).populate('city');\r\n  if (!criteria) {\r\n    throw new Error('Not found');\r\n  }\r\n  if (!criteria.fulfilledAt) {\r\n    throw new Error('Not fulfilled yet');\r\n  }\r\n  if (criteria.acknoweledgedAt) {\r\n    return criteria;\r\n  }\r\n  criteria.acknoweledgedAt = new Date();\r\n  return await criteria.save();\r\n};\r\n\r\nconst acknoweledgeAllForUser = async (user, criteriaIds) =>\r\n  await Promise.all(criteriaIds.map(id => acknoweledgeForUser(user, id)));\r\n\r\nconst deleteForUser = async (user, criteriaId) => {\r\n  const criteria = await WeatherCriteria.findOne({\r\n    user,\r\n    _id: criteriaId,\r\n  });\r\n  if (!criteria) {\r\n    throw new Error('Not found');\r\n  }\r\n  await criteria.remove();\r\n};\r\n\r\nexport default {\r\n  getAllPending,\r\n  getAllFulfilledNotAcknoweledged,\r\n  tryFulfillFromReports,\r\n  saveCriteria,\r\n  getAllUpdatedAfterForUser,\r\n  getAllForUser,\r\n  getAllFulfilledForUser,\r\n  getAllPendingForUser,\r\n  getAllFulfilledNotAcknoweledgedForUser,\r\n  acknoweledgeForUser,\r\n  acknoweledgeAllForUser,\r\n  deleteForUser,\r\n};\r\n"]}